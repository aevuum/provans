import fs from 'fs';
import path from 'path';
import { parse } from 'csv-parse/sync';
import { prisma } from '../src/lib/prisma';

type CsvRow = {
  '–§–æ—Ç–æ'?: string;
  '–§–æ—Ç–æ2'?: string;
  '–§–æ—Ç–æ3'?: string;
  '–Ω–∞–∑–≤–∞–Ω–∏–µ': string;
  '—Ä–∞–∑–º–µ—Ä'?: string;
  '—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª'?: string;
  '—Ü–µ–Ω–∞': string;
  '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–∞'?: string;
  '–®—Ç—Ä–∏—Ö–∫–æ–¥'?: string;
  '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'?: string;
};

const filePath = path.join(__dirname, '../—Ç–∞–±–ª–∏—Ü–∞-—Ç–µ—Å—Ç/2–¢–∞–±–ª–∏—á–∫–∞ –Ω–∞ —Å–∞–π—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.csv');
const file = fs.readFileSync(filePath, 'utf-8');

const records = parse(file, {
  columns: true,
  skip_empty_lines: true,
  delimiter: ';'
}) as CsvRow[];

function collectImages(row: CsvRow): string[] {
  const images: string[] = [];
  if (row['–§–æ—Ç–æ'] && row['–§–æ—Ç–æ'].trim()) images.push(row['–§–æ—Ç–æ'].trim());
  if (row['–§–æ—Ç–æ2'] && row['–§–æ—Ç–æ2'].trim()) images.push(row['–§–æ—Ç–æ2'].trim());
  if (row['–§–æ—Ç–æ3'] && row['–§–æ—Ç–æ3'].trim()) images.push(row['–§–æ—Ç–æ3'].trim());
  return images;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ CSV...');
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π`);

  // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
  await prisma.product.deleteMany();
  console.log('üóëÔ∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞');

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
  const validProducts = [];
  let skipped = 0;

  for (const row of records) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!row['–Ω–∞–∑–≤–∞–Ω–∏–µ']?.trim() || !row['—Ü–µ–Ω–∞']?.trim()) {
      skipped++;
      continue;
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ü–µ–Ω—ã –æ—Ç –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const priceStr = row['—Ü–µ–Ω–∞'].replace(/[^\d]/g, '');
    const price = parseInt(priceStr);
    if (!price || price <= 0) {
      skipped++;
      continue;
    }

    validProducts.push({
      title: row['–Ω–∞–∑–≤–∞–Ω–∏–µ'].trim(),
      price: price,
      size: row['—Ä–∞–∑–º–µ—Ä']?.trim() || null,
      material: row['—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª']?.trim() || null,
      country: row['–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–∞']?.trim() || null,
      barcode: row['–®—Ç—Ä–∏—Ö–∫–æ–¥']?.trim() || null,
      comment: row['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']?.trim() || null,
      image: row['–§–æ—Ç–æ']?.trim() || null,
      images: collectImages(row),
      isConfirmed: false
    });
  }

  console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${validProducts.length}`);
  console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${skipped}`);

  // –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
  if (validProducts.length > 0) {
    await prisma.product.createMany({
      data: validProducts,
      skipDuplicates: true
    });
    console.log(`üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${validProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalProducts = await prisma.product.count();
  console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalProducts}`);
  console.log('‚ú® –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
  
  await prisma.$disconnect();
}

main().catch(e => {
  console.error(e);
  process.exit(1);
});