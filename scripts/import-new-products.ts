// scripts/import-new-products.ts
import * as fs from 'fs';
import * as path from 'path';
import { parse } from 'csv-parse/sync';
import prisma from '../src/lib/prisma';

interface CSVProduct {
  '–§–æ—Ç–æ': string;
  '–Ω–∞–∑–≤–∞–Ω–∏–µ': string;
  '—Ä–∞–∑–º–µ—Ä': string;
  '—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª': string;
  '—Ü–µ–Ω–∞': string;
  '–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–∞': string;
  '–®—Ç—Ä–∏—Ö–∫–æ–¥': string;
  '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
function normalizeFileName(name: string): string {
  return name
    .trim()
    .replace(/["""'']/g, '"') // –ó–∞–º–µ–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –æ–¥–Ω–∏–º
    .replace(/:/g, ':') // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏—è
    .replace(/\//g, ':') // –ó–∞–º–µ–Ω–∏—Ç—å —Å–ª–µ—à–∏ –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏—è –¥–ª—è Windows —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function findMatchingImage(productName: string, imageFiles: string[]): string | null {
  const normalizedProductName = normalizeFileName(productName);
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const imageFile of imageFiles) {
    const imageName = path.parse(imageFile).name;
    const normalizedImageName = normalizeFileName(imageName);
    
    if (normalizedImageName === normalizedProductName) {
      return `/–§–û–¢–û/${imageFile}`;
    }
  }
  
  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const imageFile of imageFiles) {
    const imageName = path.parse(imageFile).name;
    const normalizedImageName = normalizeFileName(imageName);
    
    if (normalizedImageName.includes(normalizedProductName) || 
        normalizedProductName.includes(normalizedImageName)) {
      return `/–§–û–¢–û/${imageFile}`;
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function getCategory(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–≤–∞–∑–∞')) return '–í–∞–∑—ã';
  if (name.includes('–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫')) return '–ü–æ–¥—Å–≤–µ—á–Ω–∏–∫–∏';
  if (name.includes('—Ñ–æ—Ç–æ—Ä–∞–º–∫–∞') || name.includes('—Ñ ')) return '–§–æ—Ç–æ—Ä–∞–º–∫–∏';
  if (name.includes('—à–∫–∞—Ç—É–ª–∫–∞')) return '–®–∫–∞—Ç—É–ª–∫–∏';
  if (name.includes('–¥–µ—Ä–∂–∞—Ç–µ–ª—å') || name.includes('–∫–Ω–∏–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å')) return '–ö–Ω–∏–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–∏';
  if (name.includes('—Ä–æ–∑–∞') || name.includes('—Ç—é–ª—å–ø–∞–Ω') || name.includes('–ø–∏–æ–Ω') || 
      name.includes('–æ—Ä—Ö–∏–¥–µ—è') || name.includes('–≥–µ–æ—Ä–≥–∏–Ω') || name.includes('–∫–∞–ª–∏–Ω–∞') ||
      name.includes('—Å–∏—Ä–µ–Ω—å') || name.includes('—ç—Ä–µ–º—Ä—É—Å') || name.includes('—ç—É—Å—Ç–æ–º–∞') ||
      name.includes('—è–±–ª–æ–Ω—è') || name.includes('–≤–µ—Ç–∫–∞') || name.includes('–ª–æ—Ç–æ—Å') ||
      name.includes('–¥–µ–Ω–¥—Ä–æ–±–∏—É–º') || name.includes('–≥–æ—Ä—Ç–µ–Ω–∑–∏—è') || name.includes('—Ü–µ–ª–æ–∑–∏—è')) {
    return '–¶–≤–µ—Ç—ã';
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–≥—É—Ä–∫–∞/—Å—Ç–∞—Ç—É—ç—Ç–∫–∞
  if (name.includes('—Ñ–∏–≥—É—Ä–∞') || name.includes('—Å—Ç–∞—Ç—É—ç—Ç–∫–∞') || name.includes('–∞–Ω–≥–µ–ª') ||
      name.includes('–±—É–¥–¥–∞') || name.includes('–∫–ª–æ—É–Ω') || name.includes('–±–∞–ª–µ—Ä–∏–Ω–∞') ||
      name.includes('–¥–µ–≤–æ—á–∫–∞') || name.includes('–º–∞–ª—å—á–∏–∫') || name.includes('–º–∞–º–∞') ||
      name.includes('–ø–∞–ø–∞') || name.includes('—Ä–µ–±–µ–Ω–æ–∫') || name.includes('–∑–∞—è—Ü') ||
      name.includes('–∑–∞–π—á–∏–∫') || name.includes('–∫—Ä–æ–ª–∏–∫') || name.includes('—Å–æ–±–∞–∫–∞') ||
      name.includes('–∫–æ—Ç') || name.includes('–ª–∏—Å') || name.includes('–æ—Ä–µ–ª') ||
      name.includes('–ø–æ–ø—É–≥–∞–π') || name.includes('–ø—Ç–∏—Ü–∞') || name.includes('—Å–ª–æ–Ω') ||
      name.includes('–ø–∞–Ω–¥–∞') || name.includes('–º–∏—à–∫–∞') || name.includes('–º–∏–∫–∫–∏') ||
      name.includes('–≥—É—Å—å') || name.includes('–ª—è–≥—É—à–∫–∞') || name.includes('–Ω–æ—Å–æ—Ä–æ–≥') ||
      name.includes('—É–ª–∏—Ç–∫–∞') || name.includes('–∫—É–∑–Ω–µ—á–∏–∫') || name.includes('–∫–æ–Ω—å') ||
      name.includes('—Ü—ã–ø–ª–µ–Ω–æ–∫') || name.includes('–±—é—Å—Ç') || name.includes('–∏–Ω–¥—É—Å') ||
      name.includes('–≥–∏–º–Ω–∞—Å—Ç–∫–∞') || name.includes('–±–ª–∏–∑–Ω–µ—Ü—ã')) {
    return '–§–∏–≥—É—Ä—ã';
  }
  
  return '–î–µ–∫–æ—Ä';
}

async function importProducts() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvFilePath = '/Users/haibura/Desktop/numbers1/number 2.csv';
    const csvContent = fs.readFileSync(csvFilePath, 'utf-8');
    
    // –ü–∞—Ä—Å–∏–º CSV —Å —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
    const records: CSVProduct[] = parse(csvContent, {
      columns: true,
      delimiter: ';',
      skip_empty_lines: true,
      trim: true
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const photosDir = '/Users/haibura/provans-decor/public/–§–û–¢–û';
    const imageFiles = fs.readdirSync(photosDir).filter(file => 
      /\.(jpg|jpeg|png)$/i.test(file)
    );
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${records.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV`);
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ –§–û–¢–û`);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // await prisma.product.deleteMany({});
    // console.log('–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const record of records) {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        if (!record.–Ω–∞–∑–≤–∞–Ω–∏–µ || record.–Ω–∞–∑–≤–∞–Ω–∏–µ.trim() === '') {
          continue;
        }
        
        const productName = record.–Ω–∞–∑–≤–∞–Ω–∏–µ.trim();
        const price = parseFloat(record.—Ü–µ–Ω–∞) || 0;
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageFile = findMatchingImage(productName, imageFiles);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        const product = await prisma.product.create({
          data: {
            title: productName,
            price: price,
            category: getCategory(productName),
            material: record['—Å–æ—Å—Ç–∞–≤/–º–∞—Ç–µ—Ä–∏–∞–ª'] || null,
            size: record.—Ä–∞–∑–º–µ—Ä || null,
            country: record['–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–∞'] || null,
            barcode: record['–®—Ç—Ä–∏—Ö–∫–æ–¥'] || null,
            comment: record.–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π || null,
            image: imageFile,
            images: imageFile ? [imageFile] : [],
            isConfirmed: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            discount: 0 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ —Å–∫–∏–¥–∫–∏
          }
        });
        
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${productName} ${imageFile ? '(—Å —Ñ–æ—Ç–æ)' : '(–±–µ–∑ —Ñ–æ—Ç–æ)'}`);
        successCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–∞ "${record.–Ω–∞–∑–≤–∞–Ω–∏–µ}":`, error);
        errorCount++;
      }
    }
    
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    const productsWithImages = await prisma.product.count({
      where: { image: { not: null } }
    });
    const totalProducts = await prisma.product.count();
    
    console.log(`üì∏ –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${productsWithImages}/${totalProducts}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
importProducts();
