import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –°–ª–æ–≤–∞—Ä—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
const titleCorrections: Record<string, string> = {
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤
  '–í–∞–∑–∞ –∞–∑–∞': '–í–∞–∑–∞',
  '–í–∞–∑–∞ –∞–∑–∞ –º–µ—à–æ–∫': '–í–∞–∑–∞-–º–µ—à–æ–∫',
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  '–ö–∞—Ä—Ç–∏–Ω–∞ —É–≤—à–∏–Ω –º–æ–ª–æ—á–Ω—ã–π —Å —É–∑–æ—Ä–æ–º –ø–æ –≥–æ—Ä–ª—è—à–∫—É': '–ö—É–≤—à–∏–Ω –º–æ–ª–æ—á–Ω—ã–π —Å —É–∑–æ—Ä–∞–º–∏',
  '–ö—É–≤—à–∏–Ω –º–æ–ª–æ—á–Ω–π': '–ö—É–≤—à–∏–Ω –º–æ–ª–æ—á–Ω—ã–π',
  '—É–≤—à–∏–Ω': '–∫—É–≤—à–∏–Ω',
  '–≥–æ—Ä–ª—è—à–∫—É': '–≥–æ—Ä–ª—ã—à–∫—É',
  '–º–æ–ª–æ—á–Ω–π': '–º–æ–ª–æ—á–Ω—ã–π',
  
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
  '—Ñ–∏–≥—É—Ä–∞ ': '—Ñ–∏–≥—É—Ä–∫–∞ ',
  '–ø–æ–¥—Å–≤–µ—á–∏–∫': '–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫',
  '–∑–µ—Ä–∫–∞–ª–æ': '–∑–µ—Ä–∫–∞–ª–æ',
  '—Ä–∞–º–∫–∞': '—Ä–∞–º–∫–∞',
  '–∞—Ä–æ–º–∞—Ç—ã': '–∞—Ä–æ–º–∞—Ç—ã',
  '—Ç–µ–∫—Å—Ç–∏–ª': '—Ç–µ–∫—Å—Ç–∏–ª—å',
  '–ø–æ—Å—É–¥': '–ø–æ—Å—É–¥–∞',
  '–º–µ–±–µ–ª': '–º–µ–±–µ–ª—å',
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
  '  ': ' ',
  ' .': '.',
  ' ,': ',',
  '..': '.',
  ',,': ',',
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
function correctTitle(title: string): string {
  let correctedTitle = title.trim();
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  Object.entries(titleCorrections).forEach(([wrong, correct]) => {
    const regex = new RegExp(wrong, 'gi');
    correctedTitle = correctedTitle.replace(regex, correct);
  });
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥
  correctedTitle = correctedTitle.replace(/\b(\w+)\s+\1\b/gi, '$1');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä - –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
  correctedTitle = correctedTitle.charAt(0).toUpperCase() + correctedTitle.slice(1).toLowerCase();
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
  correctedTitle = correctedTitle.replace(/([.!?]\s+|^)(\w)/g, (match, punct, letter) => 
    punct + letter.toUpperCase()
  );
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  correctedTitle = correctedTitle.replace(/\s+/g, ' ').trim();
  
  return correctedTitle;
}

async function correctProductTitles() {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      select: {
        id: true,
        title: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    let correctedCount = 0;
    const corrections: Array<{id: number, oldTitle: string, newTitle: string}> = [];
    
    for (const product of products) {
      const correctedTitle = correctTitle(product.title);
      
      if (correctedTitle !== product.title) {
        corrections.push({
          id: product.id,
          oldTitle: product.title,
          newTitle: correctedTitle
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await prisma.product.update({
          where: { id: product.id },
          data: { title: correctedTitle }
        });
        
        correctedCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${correctedCount}`);
    
    if (corrections.length > 0) {
      console.log('\nüìã –°–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
      corrections.forEach((correction, index) => {
        console.log(`${index + 1}. ID: ${correction.id}`);
        console.log(`   –ë—ã–ª–æ: "${correction.oldTitle}"`);
        console.log(`   –°—Ç–∞–ª–æ: "${correction.newTitle}"`);
        console.log('');
      });
    }
    
    console.log('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

correctProductTitles();
