// scripts/import-new-table.ts
import prisma from '../src/lib/prisma';
import * as fs from 'fs';
import * as path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ç–æ
function normalizeProductName(name: string): string {
  // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  return name
    .toLowerCase()
    .replace(/[""¬´¬ª]/g, '"')  // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
    .replace(/[()]/g, '')      // –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏
    .replace(/[/\\]/g, ':')    // –ó–∞–º–µ–Ω—è–µ–º —Å–ª–µ—à–∏ –Ω–∞ –¥–≤–æ–µ—Ç–æ—á–∏—è
    .replace(/\s+/g, ' ')      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ
function findMatchingPhoto(productName: string, photoFiles: string[]): string | null {
  const normalizedName = normalizeProductName(productName);
  
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const photo of photoFiles) {
    const photoNameNormalized = normalizeProductName(
      photo.replace(' ‚Äî –∫–æ–ø–∏—è.jpeg', '').replace(' ‚Äî –∫–æ–ø–∏—è.jpg', '').replace(' ‚Äî –∫–æ–ø–∏—è.png', '')
    );
    
    if (photoNameNormalized === normalizedName) {
      return `/–§–û–¢–û/${photo}`;
    }
  }
  
  // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
  for (const photo of photoFiles) {
    const photoNameNormalized = normalizeProductName(
      photo.replace(' ‚Äî –∫–æ–ø–∏—è.jpeg', '').replace(' ‚Äî –∫–æ–ø–∏—è.jpg', '').replace(' ‚Äî –∫–æ–ø–∏—è.png', '')
    );
    
    if (photoNameNormalized.includes(normalizedName) || normalizedName.includes(photoNameNormalized)) {
      return `/–§–û–¢–û/${photo}`;
    }
  }
  
  return null;
}

async function importNewTable() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ß–∏—Ç–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    const csvContent = fs.readFileSync('/Users/haibura/Desktop/numbers1/—Ç–∞–±–ª–∏—Ü–∞.csv', 'utf-8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    const photoDir = '/Users/haibura/provans-decor/public/–§–û–¢–û';
    const photoFiles = fs.readdirSync(photoDir).filter(file => 
      file.toLowerCase().includes('–∫–æ–ø–∏—è') && 
      (file.endsWith('.jpeg') || file.endsWith('.jpg') || file.endsWith('.png'))
    );
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${photoFiles.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // await prisma.product.deleteMany({});
    // console.log('–°—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã');
    
    let imported = 0;
    let skipped = 0;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      if (!line.trim()) continue;
      
      const columns = line.split(';');
      if (columns.length < 5) continue;
      
      const [, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–µ–Ω–∞Str, —Å—Ç—Ä–∞–Ω–∞, —à—Ç—Ä–∏—Ö–∫–æ–¥, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] = columns;
      
      if (!–Ω–∞–∑–≤–∞–Ω–∏–µ || !—Ü–µ–Ω–∞Str) {
        skipped++;
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
      const price = parseFloat(—Ü–µ–Ω–∞Str) || 0;
      if (price === 0) {
        skipped++;
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      let category = '–¥—Ä—É–≥–æ–µ';
      const nameUpper = –Ω–∞–∑–≤–∞–Ω–∏–µ.toUpperCase();
      
      if (nameUpper.includes('–í–ê–ó–ê')) category = '–≤–∞–∑—ã';
      else if (nameUpper.includes('–§–û–¢–û–†–ê–ú–ö–ê') || nameUpper.includes('–§ ')) category = '—Ñ–æ—Ç–æ—Ä–∞–º–∫–∏';
      else if (nameUpper.includes('–ü–û–î–°–í–ï–ß–ù–ò–ö')) category = '–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫–∏';
      else if (nameUpper.includes('–®–ö–ê–¢–£–õ–ö–ê')) category = '—à–∫–∞—Ç—É–ª–∫–∏';
      else if (nameUpper.includes('–ö–ù–ò–ì–û–î–ï–†–ñ–ê–¢–ï–õ')) category = '–∫–Ω–∏–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–∏';
      else if (nameUpper.includes('–§–ò–ì–£–†') || nameUpper.includes('–°–¢–ê–¢–£–≠–¢') || 
               nameUpper.includes('–ê–ù–ì–ï–õ') || nameUpper.includes('–ó–ê–Ø–¶') || 
               nameUpper.includes('–ö–†–û–õ–ò–ö') || nameUpper.includes('–°–û–ë–ê–ö–ê')) category = '—Ñ–∏–≥—É—Ä—ã';
      else if (nameUpper.includes('–†–û–ó–ê') || nameUpper.includes('–ü–ò–û–ù') || 
               nameUpper.includes('–¢–Æ–õ–¨–ü–ê–ù') || nameUpper.includes('–û–†–•–ò–î–ï–Ø') ||
               nameUpper.includes('–≠–£–°–¢–û–ú–ê') || nameUpper.includes('–õ–û–¢–û–°')) category = '—Ü–≤–µ—Ç—ã';
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
      const image = findMatchingPhoto(–Ω–∞–∑–≤–∞–Ω–∏–µ, photoFiles);
      
      try {
        await prisma.product.create({
          data: {
            title: –Ω–∞–∑–≤–∞–Ω–∏–µ.trim(),
            price: price,
            comment: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?.trim() || '',
            category: category,
            size: —Ä–∞–∑–º–µ—Ä?.trim() || '',
            material: –º–∞—Ç–µ—Ä–∏–∞–ª?.trim() || '',
            country: —Å—Ç—Ä–∞–Ω–∞?.trim() || '',
            barcode: —à—Ç—Ä–∏—Ö–∫–æ–¥?.trim() || '',
            image: image,
            images: image ? [image] : [],
            isConfirmed: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            createdAt: new Date(),
            updatedAt: new Date()
          }
        });
        
        imported++;
        
        if (imported % 50 === 0) {
          console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${imported} —Ç–æ–≤–∞—Ä–æ–≤...`);
        }
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ "${–Ω–∞–∑–≤–∞–Ω–∏–µ}":`, error);
        skipped++;
      }
    }
    
    console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${imported} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`üñºÔ∏è –° —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏: ${imported} —Ç–æ–≤–∞—Ä–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importNewTable();
