generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:senife@localhost:5432/provans"
}

model Product {
  id               Int          @id @default(autoincrement())
  title            String
  price            Int
  size             String?
  material         String?
  country          String?
  barcode          String?      @unique
  comment          String?
  image            String?
  images           String[]
  isConfirmed      Boolean      @default(false)
  discount         Float?       @default(0)
  category         String?
  quantity         Int          @default(0)
  reserved         Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  categoryId       Int?
  originalPrice    Int?
  subcategory      String?
  subcategoryId    Int?
  orderItems       OrderItem[]
  categoryModel    Category?    @relation(fields: [categoryId], references: [id])
  subcategoryModel Subcategory? @relation(fields: [subcategoryId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  slug          String        @unique
  description   String?
  image         String?
  isActive      Boolean       @default(true)
  sortOrder     Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String?
  password String
  role     String  @default("user")
  orders   Order[]
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique @default(cuid())
  status          OrderStatus @default(PENDING)
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerAddress String?
  subtotal        Float
  shippingCost    Float       @default(0)
  total           Float
  userId          Int?
  notes           String?
  paymentMethod   String?
  shippingMethod  String?
  trackingNumber  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
}

model PaymentOrder {
  id           String   @id @default(cuid())
  orderId      String   @unique
  amount       Float
  status       String   @default("pending")
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  orderId   Int
  productId Int
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
