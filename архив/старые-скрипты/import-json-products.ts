import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

interface ProductData {
  title: string;
  raw_title: string;
  image_path: string;
  price?: number;
}

async function importProductsFromJson() {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ products.json...\n');
    
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const jsonPath = path.join(process.cwd(), 'products.json');
    const jsonData = fs.readFileSync(jsonPath, 'utf-8');
    const products: ProductData[] = JSON.parse(jsonData);
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª–µ\n`);
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const shouldClear = process.argv.includes('--clear');
    if (shouldClear) {
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã...');
      await prisma.product.deleteMany({});
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã\n');
    }
    
    let successCount = 0;
    let errorCount = 0;
    
    console.log('üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...\n');
    
    for (const [index, productData] of products.entries()) {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!productData.title || !productData.raw_title) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä ${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
          continue;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ raw_title
        const category = determineCategory(productData.raw_title);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        await prisma.product.create({
          data: {
            title: productData.title.trim(),
            price: productData.price || 0,
            image: productData.image_path || null,
            category: category,
            isConfirmed: false, // –¢–æ–≤–∞—Ä—ã –∏–∑ JSON —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            size: extractSize(productData.title),
            material: null,
            country: null,
            barcode: null,
            comment: null,
            images: [], // –ú–∞—Å—Å–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π
            quantity: 1,
            reserved: 0,
            discount: 0
          }
        });
        
        successCount++;
        
        if (successCount % 100 === 0) {
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${successCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
        }
        
      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ç–æ–≤–∞—Ä–∞ "${productData.title}":`, error);
      }
    }
    
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
function determineCategory(title: string): string {
  const name = title.toLowerCase();
  
  if (name.includes('–≤–∞–∑–∞')) return '–≤–∞–∑—ã';
  if (name.includes('–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫')) return '–ø–æ–¥—Å–≤–µ—á–Ω–∏–∫–∏';
  if (name.includes('—Ñ–æ—Ç–æ—Ä–∞–º–∫–∞') || name.includes(' —Ñ ')) return '—Ñ–æ—Ç–æ—Ä–∞–º–∫–∏';
  if (name.includes('—à–∫–∞—Ç—É–ª–∫–∞')) return '—à–∫–∞—Ç—É–ª–∫–∏';
  if (name.includes('–¥–µ—Ä–∂–∞—Ç–µ–ª—å')) return '–¥–µ—Ä–∂–∞—Ç–µ–ª–∏';
  if (name.includes('—Ä–æ–∑–∞') || name.includes('—Ç—é–ª—å–ø–∞–Ω') || name.includes('–ø–∏–æ–Ω') || 
      name.includes('–æ—Ä—Ö–∏–¥–µ—è') || name.includes('–±—É–∫–µ—Ç')) return '—Ü–≤–µ—Ç—ã';
  if (name.includes('–∞–Ω–≥–µ–ª') || name.includes('–±–∞–ª–µ—Ä–∏–Ω–∞') || name.includes('—Ñ–∏–≥—É—Ä')) return '—Ñ–∏–≥—É—Ä—ã';
  if (name.includes('—Å–≤–µ—á–∞') || name.includes('—Å–≤–µ—á–∏')) return '—Å–≤–µ—á–∏';
  if (name.includes('—Ç–∞—Ä–µ–ª–∫–∞') || name.includes('–±–ª—é–¥–æ') || name.includes('–∫—Ä—É–∂–∫–∞') || 
      name.includes('—á–∞—à–∫–∞') || name.includes('–ø–æ—Å—É–¥–∞')) return '–ø–æ—Å—É–¥–∞';
  if (name.includes('–ø–æ–¥—É—à–∫–∞') || name.includes('–ø–æ–∫—Ä—ã–≤–∞–ª') || name.includes('–ø–ª–µ–¥')) return '—Ç–µ–∫—Å—Ç–∏–ª—å';
  if (name.includes('–∑–µ—Ä–∫–∞–ª–æ')) return '–∑–µ—Ä–∫–∞–ª–∞';
  if (name.includes('—á–∞—Å—ã')) return '—á–∞—Å—ã';
  if (name.includes('–∫–æ—Ä–∑–∏–Ω')) return '–∫–æ—Ä–∑–∏–Ω—ã';
  if (name.includes('–ª–∞–º–ø–∞') || name.includes('—Å–≤–µ—Ç–∏–ª—å')) return '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏';
  if (name.includes('–Ω–æ–≤—ã–π –≥–æ–¥') || name.includes('–µ–ª–æ—á–Ω—ã–µ') || name.includes('—Ä–æ–∂–¥–µ—Å—Ç')) return '–Ω–æ–≤—ã–π –≥–æ–¥';
  if (name.includes('–ø–∞—Å—Ö–∞')) return '–ø–∞—Å—Ö–∞';
  
  return '–¥–µ–∫–æ—Ä'; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function extractSize(title: string): string | null {
  // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ*—á–∏—Å–ª–æ*—á–∏—Å–ª–æ" –∏–ª–∏ "—á–∏—Å–ª–æ*—á–∏—Å–ª–æ"
  const sizeMatch = title.match(/\d+(?:\.\d+)?[\*\s]+\d+(?:\.\d+)?(?:[\*\s]+\d+(?:\.\d+)?)?/);
  return sizeMatch ? sizeMatch[0].replace(/\s+/g, ' ').trim() : null;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importProductsFromJson();
