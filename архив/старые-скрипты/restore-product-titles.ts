import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
function correctProductTitle(title: string): string {
  if (!title || title.trim() === '' || title.includes('.')) {
    return title; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  }

  let corrected = title.trim();
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤
  const corrections = {
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤
    '–í–∞–∑–∞ –∞–∑–∞': '–í–∞–∑–∞',
    '–§–æ—Ç–æ—Ä–∞–º–∫–∞ –æ—Ç–æ—Ä–∞–º–∫–∞': '–§–æ—Ç–æ—Ä–∞–º–∫–∞',
    '–ü–æ–¥—Å–≤–µ—á–Ω–∏–∫ –æ–¥—Å–≤–µ—á–Ω–∏–∫': '–ü–æ–¥—Å–≤–µ—á–Ω–∏–∫',
    '–ö–∞—Ä—Ç–∏–Ω–∞ –∞—Ä—Ç–∏–Ω–∞': '–ö–∞—Ä—Ç–∏–Ω–∞',
    '–î–µ–∫–æ—Ä –µ–∫–æ—Ä': '–î–µ–∫–æ—Ä',
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
    '—É–≤—à–∏–Ω': '–∫—É–≤—à–∏–Ω',
    '–º–æ–ª–æ—á–Ω–π': '–º–æ–ª–æ—á–Ω—ã–π',
    '–≥–æ—Ä–ª—è—à–∫—É': '–≥–æ—Ä–ª—ã—à–∫—É',
    '—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π': '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    '–∏–≥—É—Ä–∞': '—Ñ–∏–≥—É—Ä–∞',
    '–∏–≥—É—Ä–∫–∞': '—Ñ–∏–≥—É—Ä–∫–∞',
    '—Ç–∏—Ü–∞': '–ø—Ç–∏—Ü–∞',
    '–æ–ø—É–≥–∞–π': '–ø–æ–ø—É–≥–∞–π',
    '–µ–Ω–¥—Ä–æ–±–∏—É–º': '–¥–µ–Ω–¥—Ä–æ–±–∏—É–º',
    '–Ω–∏–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å': '–∫–Ω–∏–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å',
    '–µ—Ç–∫–∞': '–≤–µ—Ç–∫–∞',
    '–µ—Ä–∂–∞—Ç–µ–ª—å': '–¥–µ—Ä–∂–∞—Ç–µ–ª—å',
    '–µ–≤–æ—á–∫–∞': '–¥–µ–≤–æ—á–∫–∞',
    '–µ—Ä–ª–∞–º—É—Ç—Ä': '–ø–µ—Ä–ª–∞–º—É—Ç—Ä',
    '–æ–¥—Å–≤': '–ø–æ–¥—Å–≤',
    '—É–∑–Ω–µ—á–∏–∫': '–∫—É–∑–Ω–µ—á–∏–∫',
    '–ª–æ—É–Ω': '–∫–ª–æ—É–Ω',
    '–æ–Ω—å': '–∫–æ–Ω—å',
    '—Ä–æ–ª–∏–∫': '–∫—Ä–æ–ª–∏–∫',
    '–∏–Ω ': '–ø–∏–æ–Ω ',
    '–∏–æ–ª–µ—Ç–æ–≤—ã–π': '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π',
    '–∞–Ω–¥–∞': '–ø–∞–Ω–¥–∞',
    '—Ä–∏–¥–∞': '—Ñ—Ä–∏–¥–∞',
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    ' –∞–∑–∞ ': ' ',
    '–º–µ—à–æ–∫': '',
    ' –± ': ' –±–æ–ª—å—à–∞—è ',
    ' –º ': ' –º–∞–ª–µ–Ω—å–∫–∞—è ',
    ' —Å ': ' —Å—Ä–µ–¥–Ω—è—è ',
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    '¬ø': '',
    '=': '-',
    '..': '.',
    '  ': ' ',
    ' ,': ',',
    ' .': '.'
  };
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  Object.entries(corrections).forEach(([wrong, right]) => {
    const regex = new RegExp(wrong, 'gi');
    corrected = corrected.replace(regex, right);
  });
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ —Ä—è–¥–æ–º
  corrected = corrected.replace(/\b(\w+)\s+\1\b/gi, '$1');
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
  corrected = corrected.charAt(0).toUpperCase() + corrected.slice(1);
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  corrected = corrected.replace(/\s+/g, ' ').trim();
  
  return corrected;
}

async function restoreAndFixTitles() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const allProducts = await prisma.product.findMany({
      select: { id: true, title: true }
    });
    
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${allProducts.length}`);
    
    let fixedCount = 0;
    const corrections: Array<{id: number, oldTitle: string, newTitle: string}> = [];
    
    for (const product of allProducts) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ç–æ—á–∫–∞–º–∏ (–æ–Ω–∏ –±—ã–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã)
      if (product.title.includes('...') || product.title.length < 5) {
        console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ID ${product.id}: "${product.title}"`);
        continue;
      }
      
      const correctedTitle = correctProductTitle(product.title);
      
      if (correctedTitle !== product.title && correctedTitle.length > 4) {
        corrections.push({
          id: product.id,
          oldTitle: product.title,
          newTitle: correctedTitle
        });
        
        await prisma.product.update({
          where: { id: product.id },
          data: { title: correctedTitle }
        });
        
        fixedCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${fixedCount}`);
    
    if (corrections.length > 0) {
      console.log('\nüìã –ü–µ—Ä–≤—ã–µ 10 –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:');
      corrections.slice(0, 10).forEach((correction, index) => {
        console.log(`${index + 1}. ID: ${correction.id}`);
        console.log(`   –ë—ã–ª–æ: "${correction.oldTitle}"`);
        console.log(`   –°—Ç–∞–ª–æ: "${correction.newTitle}"`);
        console.log('');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreAndFixTitles();
