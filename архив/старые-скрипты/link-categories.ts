import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function linkProductsToCategories() {
  try {
    console.log('=== –ü–†–ò–í–Ø–ó–ö–ê –¢–û–í–ê–†–û–í –ö –ö–ê–¢–ï–ì–û–†–ò–Ø–ú ===');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      include: { subcategories: true }
    });
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const categoryMap = new Map();
    const subcategoryMap = new Map();
    
    categories.forEach(cat => {
      categoryMap.set(cat.name.toLowerCase(), cat.id);
      categoryMap.set(cat.slug.toLowerCase(), cat.id);
      
      cat.subcategories.forEach(sub => {
        subcategoryMap.set(sub.name.toLowerCase(), { categoryId: cat.id, subcategoryId: sub.id });
        subcategoryMap.set(sub.slug.toLowerCase(), { categoryId: cat.id, subcategoryId: sub.id });
      });
    });
    
    // –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ ID
    const categoryMappings: { [key: string]: { categoryName: string; subcategoryName?: string } } = {
      '–≤–∞–∑—ã': { categoryName: '–î–µ–∫–æ—Ä', subcategoryName: '–í–∞–∑—ã' },
      '–¥–µ–∫–æ—Ä': { categoryName: '–î–µ–∫–æ—Ä' },
      '—Ç–µ–∫—Å—Ç–∏–ª—å': { categoryName: '–¢–µ–∫—Å—Ç–∏–ª—å' },
      '–ø–æ—Å—É–¥–∞': { categoryName: '–ü–æ—Å—É–¥–∞ –∏ –±–æ–∫–∞–ª—ã' },
      '–º–µ–±–µ–ª—å': { categoryName: '–ú–µ–±–µ–ª—å' },
      '—Ü–≤–µ—Ç—ã': { categoryName: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã' },
      '–∞—Ä–æ–º–∞—Ç—ã': { categoryName: '–ê—Ä–æ–º–∞—Ç—ã –¥–ª—è –¥–æ–º–∞ –∏ —Å–≤–µ—á–∏' },
      '—Å–≤–µ—á–∏': { categoryName: '–ê—Ä–æ–º–∞—Ç—ã –¥–ª—è –¥–æ–º–∞ –∏ —Å–≤–µ—á–∏' },
      '–Ω–æ–≤—ã–π –≥–æ–¥': { categoryName: '–ù–æ–≤—ã–π –≥–æ–¥' },
      '–ø–∞—Å—Ö–∞': { categoryName: '–ü–∞—Å—Ö–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è' },
    };
    
    let updatedCount = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ categoryId
    const products = await prisma.product.findMany({
      where: { categoryId: null }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º`);
    
    for (const product of products) {
      const categoryText = product.category?.toLowerCase().trim();
      
      if (categoryText && categoryMappings[categoryText]) {
        const mapping = categoryMappings[categoryText];
        
        // –ù–∞—Ö–æ–¥–∏–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryId = categoryMap.get(mapping.categoryName.toLowerCase());
        let subcategoryId = null;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞—Ö–æ–¥–∏–º –µ—ë ID
        if (mapping.subcategoryName) {
          const subcategoryData = subcategoryMap.get(mapping.subcategoryName.toLowerCase());
          if (subcategoryData) {
            subcategoryId = subcategoryData.subcategoryId;
          }
        }
        
        if (categoryId) {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              categoryId,
              subcategoryId
            }
          });
          
          updatedCount++;
          
          if (updatedCount % 50 === 0) {
            console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
          }
        }
      }
    }
    
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const categoriesWithCounts = await prisma.category.findMany({
      include: {
        _count: {
          select: { products: true }
        }
      }
    });
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    categoriesWithCounts.forEach(cat => {
      console.log(`  ${cat.name}: ${cat._count.products} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

linkProductsToCategories();
