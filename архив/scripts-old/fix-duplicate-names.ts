import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixDuplicateNames() {
  try {
    console.log('üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏...');
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    const duplicateGroups = await prisma.product.groupBy({
      by: ['title'],
      _count: {
        title: true
      },
      having: {
        title: {
          _count: {
            gt: 1
          }
        }
      }
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–∞–∑–≤–∞–Ω–∏–π`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for (const group of duplicateGroups) {
      const products = await prisma.product.findMany({
        where: { title: group.title },
        orderBy: { id: 'asc' }
      });
      
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${group.title}"`);
      
      // –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –æ—Å—Ç–∞–µ—Ç—Å—è —Å –±–∞–∑–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç –Ω–æ–º–µ—Ä–∞
      for (let i = 1; i < products.length; i++) {
        const newTitle = `${group.title} ${i + 1}`;
        await prisma.product.update({
          where: { id: products[i].id },
          data: { title: newTitle }
        });
        console.log(`‚úÖ –¢–æ–≤–∞—Ä ID ${products[i].id}: "${newTitle}"`);
      }
    }
    
    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDuplicateNames();
