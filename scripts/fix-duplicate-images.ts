import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

interface Product {
  id: number;
  title: string;
  image: string | null;
  images: string[];
}

async function fixDuplicateImages() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      select: {
        id: true,
        title: true,
        image: true,
        images: true,
      },
      orderBy: {
        id: 'asc'
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤)
    const groupedByTitle = new Map<string, Product[]>();
    
    for (const product of products) {
      if (!product.title) continue;
      
      const normalizedTitle = product.title.trim().toLowerCase();
      if (!groupedByTitle.has(normalizedTitle)) {
        groupedByTitle.set(normalizedTitle, []);
      }
      groupedByTitle.get(normalizedTitle)!.push(product);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    const duplicateGroups = Array.from(groupedByTitle.entries()).filter(([_, items]) => items.length > 1);
    
    console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: ${duplicateGroups.length}`);

    let fixedCount = 0;
    let errorsCount = 0;

    for (const [normalizedTitle, items] of duplicateGroups) {
      const displayTitle = items[0].title; // –ë–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É: "${displayTitle}" (${items.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
      
      for (let i = 0; i < items.length; i++) {
        const product = items[i];
        const isFirst = i === 0;
        
        try {
          if (!product.image) {
            console.log(`‚ö†Ô∏è ID ${product.id}: –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
            continue;
          }

          // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (isFirst) {
            const fullPath = path.join(process.cwd(), 'public', product.image);
            if (fs.existsSync(fullPath)) {
              console.log(`‚úÖ ID ${product.id}: –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${product.image}`);
              continue;
            }
          }

          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const baseImageName = getBaseImageName(product.image);
          const baseName = path.basename(baseImageName, path.extname(baseImageName));
          const dir = path.dirname(baseImageName);
          const publicDir = path.join(process.cwd(), 'public');
          const dirPath = path.join(publicDir, dir);

          if (!fs.existsSync(dirPath)) {
            console.log(`‚ùå ID ${product.id}: –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ${dirPath}`);
            errorsCount++;
            continue;
          }

          const files = fs.readdirSync(dirPath);
          const extensions = ['.jpeg', '.jpg', '.png', '.webp'];
          let found = false;

          // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
          for (let num = 2; num <= 10; num++) {
            for (const ext of extensions) {
              const candidateName = `${baseName} ${num}${ext}`;
              if (files.includes(candidateName)) {
                const newImagePath = path.join(dir, candidateName).replace(/\\/g, '/');
                
                await prisma.product.update({
                  where: { id: product.id },
                  data: {
                    image: newImagePath,
                    images: [newImagePath]
                  }
                });
                
                console.log(`‚úÖ ID ${product.id}: ${product.image} ‚Üí ${newImagePath}`);
                fixedCount++;
                found = true;
                break;
              }
            }
            if (found) break;
          }

          if (!found) {
            console.log(`‚ùå ID ${product.id}: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${baseName}"`);
            errorsCount++;
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
          errorsCount++;
        }
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${fixedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorsCount}`);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

function getBaseImageName(imagePath: string): string {
  if (!imagePath) return '';
  
  // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
  const cleanPath = imagePath.startsWith('/') ? imagePath.substring(1) : imagePath;
  
  return cleanPath;
}

function addSuffixToImageName(imagePath: string, suffix: string): string {
  const ext = path.extname(imagePath);
  const nameWithoutExt = imagePath.replace(ext, '');
  return `${nameWithoutExt}${suffix}${ext}`;
}

async function findAlternativeImage(product: Product, suffix: string): Promise<boolean> {
  if (!product.image) return false;
  
  const publicDir = path.join(process.cwd(), 'public');
  const baseImageName = getBaseImageName(product.image);
  const baseName = path.basename(baseImageName, path.extname(baseImageName));
  const dir = path.dirname(baseImageName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
  const dirPath = path.join(publicDir, dir);
  
  if (!fs.existsSync(dirPath)) return false;
  
  const files = fs.readdirSync(dirPath);
  const extensions = ['.jpeg', '.jpg', '.png', '.webp'];
  
  for (const ext of extensions) {
    for (let num = 2; num <= 10; num++) {
      const candidateName = `${baseName} ${num}${ext}`;
      if (files.includes(candidateName)) {
        const newImagePath = path.join(dir, candidateName).replace(/\\/g, '/');
        
        try {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              image: newImagePath,
              images: [newImagePath]
            }
          });
          
          console.log(`‚úÖ ID ${product.id}: –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Üí ${newImagePath}`);
          return true;
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${product.id}:`, error);
        }
      }
    }
  }
  
  return false;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixDuplicateImages();
