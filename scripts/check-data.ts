import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkData() {
  try {
    console.log('=== –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany({
      include: {
        subcategories: true,
        _count: {
          select: { products: true }
        }
      }
    });
    
    console.log(`\nüìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (${categories.length}):`);
    categories.forEach(cat => {
      console.log(`  - ${cat.name} (${cat._count.products} —Ç–æ–≤–∞—Ä–æ–≤, ${cat.subcategories.length} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    const productsCount = await prisma.product.count();
    console.log(`\nüì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsCount}`);
    
    if (productsCount > 0) {
      const sampleProducts = await prisma.product.findMany({
        take: 3,
        include: {
          categoryModel: true,
          subcategoryModel: true
        }
      });
      
      console.log('\nüìù –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤:');
      sampleProducts.forEach(product => {
        console.log(`  - ${product.title}`);
        console.log(`    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.categoryModel?.name || product.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        console.log(`    –¶–µ–Ω–∞: ${product.price}‚ÇΩ`);
        console.log(`    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${product.images?.length || 0}`);
        console.log(`    categoryId: ${product.categoryId}`);
      });
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkData();
