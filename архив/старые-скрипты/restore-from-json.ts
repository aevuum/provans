import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON
interface ProductFromJson {
  title: string
  raw_title: string
  image_path: string
  price: number
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
function fixGrammar(title: string): string {
  const corrections: Record<string, string> = {
    '–≤–∞–∑–∞ –∞–∑–∞': '–≤–∞–∑–∞',
    '—É–≤—à–∏–Ω': '–∫—É–≤—à–∏–Ω',
    '—É–≤—à–∏–Ω—á–∏–∫': '–∫—É–≤—à–∏–Ω—á–∏–∫',
    '–∞–±–æ—á–∫–∞': '–±–∞–±–æ—á–∫–∞',
    '–≤—Ñ—Ä–∏–∫–∞–Ω': '–∞—Ñ—Ä–∏–∫–∞–Ω',
    '–ê—Ñ—Ä–∏–∫–∞–Ω': '–ê—Ñ—Ä–∏–∫–∞–Ω',
    '—Ñ–∏–≥—É—Ä–∫–∞ —Ñ–∞—Ä—Ñ–æ—Ä': '—Ñ–∞—Ä—Ñ–æ—Ä–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∫–∞',
    '–º—É–∑—ã–∫–∞–Ω—Ç –º—É–∑—ã–∫–∞–Ω—Ç': '–º—É–∑—ã–∫–∞–Ω—Ç',
    '–ë–∞–ª–µ—Ä–∏–Ω–∞': '–ë–∞–ª–µ—Ä–∏–Ω–∞',
    '–Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ –Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ': '–Ω–∞ –ø–æ–¥—Å—Ç–∞–≤–∫–µ',
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ —Å–ª–æ–≤
    '  ': ' '
  }
  
  let corrected = title
  
  for (const [wrong, correct] of Object.entries(corrections)) {
    const regex = new RegExp(wrong, 'gi')
    corrected = corrected.replace(regex, correct)
  }
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–ª–æ–≤
  corrected = corrected.replace(/\b(\w+)\s+\1\b/gi, '$1')
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  corrected = corrected.replace(/\s+/g, ' ').trim()
  
  return corrected
}

async function restoreFromJson() {
  console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ products.json...')
  
  try {
    // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
    const jsonPath = path.join(process.cwd(), 'products.json')
    const jsonContent = fs.readFileSync(jsonPath, 'utf-8')
    const productsFromJson: ProductFromJson[] = JSON.parse(jsonContent)
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON: ${productsFromJson.length}`)
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã
    const dbProducts = await prisma.product.findMany({
      orderBy: { id: 'asc' }
    })
    
    console.log(`üóÉÔ∏è  –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${dbProducts.length}`)
    
    let restoredCount = 0
    let updatedImages = 0
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ —Ü–µ–Ω–µ
    for (let i = 0; i < Math.min(productsFromJson.length, dbProducts.length); i++) {
      const jsonProduct = productsFromJson[i]
      const dbProduct = dbProducts[i]
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      let correctedTitle = fixGrammar(jsonProduct.title)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      const imagePath = `/uploads${jsonProduct.image_path}`
      
      try {
        const updateData: any = {
          title: correctedTitle,
          price: jsonProduct.price
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
        if (!dbProduct.images || dbProduct.images.length === 0) {
          updateData.images = [imagePath]
          updateData.image = imagePath
          updatedImages++
        }
        
        await prisma.product.update({
          where: { id: dbProduct.id },
          data: updateData
        })
        
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ID ${dbProduct.id}: "${dbProduct.title}" ‚Üí "${correctedTitle}"`)
        restoredCount++
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ID ${dbProduct.id}:`, error)
      }
    }
    
    console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${restoredCount}`)
    console.log(`üñºÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${updatedImages}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ JSON:', error)
  } finally {
    await prisma.$disconnect()
  }
}

restoreFromJson()
