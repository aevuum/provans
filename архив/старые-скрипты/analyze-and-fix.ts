import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function analyzeAndFixDatabase() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    console.log('üìù 1. –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤:');
    const duplicates = await prisma.$queryRaw<Array<{title: string, count: bigint}>>`
      SELECT title, COUNT(*) as count 
      FROM "Product" 
      WHERE title IS NOT NULL AND title != ''
      GROUP BY title 
      HAVING COUNT(*) > 1 
      ORDER BY count DESC, title
    `;
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏\n`);
    
    let fixedImages = 0;
    
    for (const dup of duplicates.slice(0, 10)) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
      console.log(`üì¶ "${dup.title}" - ${dup.count} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const products = await prisma.product.findMany({
        where: { title: dup.title },
        select: { id: true, title: true, image: true, images: true },
        orderBy: { id: 'asc' }
      });
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      for (let i = 0; i < products.length; i++) {
        const product = products[i];
        console.log(`   ID ${product.id}: ${product.image || '–ù–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø'}`);
        
        if (i > 0 && product.image) { // –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
          const result = await findAndAssignAlternativeImage(product, i + 1);
          if (result) {
            fixedImages++;
            console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result}`);
          }
        }
      }
      console.log('');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üè∑Ô∏è 2. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:');
    const categoryStats = await prisma.$queryRaw<Array<{category: string, count: bigint}>>`
      SELECT category, COUNT(*) as count 
      FROM "Product" 
      WHERE category IS NOT NULL AND category != ''
      GROUP BY category 
      ORDER BY count DESC
    `;
    
    console.log('   –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    categoryStats.forEach(stat => {
      console.log(`   ${stat.category}: ${stat.count} —Ç–æ–≤–∞—Ä–æ–≤`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('\nüñºÔ∏è 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
    const productsWithImages = await prisma.product.findMany({
      where: { 
        image: { not: null },
        isConfirmed: true 
      },
      select: { id: true, image: true },
      take: 50 // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 50
    });
    
    let missingImages = 0;
    let existingImages = 0;
    
    for (const product of productsWithImages) {
      if (product.image) {
        const fullPath = path.join(process.cwd(), 'public', product.image);
        if (fs.existsSync(fullPath)) {
          existingImages++;
        } else {
          missingImages++;
          console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${product.image} (ID: ${product.id})`);
        }
      }
    }
    
    console.log(`   ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${missingImages} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    // 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${fixedImages}`);
    console.log(`   –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryStats.length}`);
    console.log(`   –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryStats.slice(0, 5).map(s => s.category).join(', ')}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function findAndAssignAlternativeImage(product: any, number: number): Promise<string | null> {
  if (!product.image) return null;
  
  const publicDir = path.join(process.cwd(), 'public');
  const baseImagePath = product.image;
  const dir = path.dirname(baseImagePath);
  const ext = path.extname(baseImagePath);
  const baseName = path.basename(baseImagePath, ext);
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏
  const candidates = [
    `${baseName} ${number}${ext}`,
    `${baseName}${number}${ext}`,
    `${baseName} (${number})${ext}`,
  ];
  
  for (const candidate of candidates) {
    const candidatePath = path.join(dir, candidate);
    const fullPath = path.join(publicDir, candidatePath);
    
    if (fs.existsSync(fullPath)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
      await prisma.product.update({
        where: { id: product.id },
        data: {
          image: candidatePath,
          images: [candidatePath]
        }
      });
      
      return candidatePath;
    }
  }
  
  return null;
}

analyzeAndFixDatabase();
