import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function fixImagePaths() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany();
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    
    let fixedCount = 0;
    let errorsCount = 0;
    
    for (const product of products) {
      try {
        let needsUpdate = false;
        let newImage = product.image;
        let newImages = product.images;
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (product.image && product.image.startsWith('/uploads/–§–û–¢–û/')) {
          const correctedPath = product.image.replace('/uploads/–§–û–¢–û/', '/–§–û–¢–û/');
          const filePath = path.join(process.cwd(), 'public', correctedPath);
          
          if (fs.existsSync(filePath)) {
            newImage = correctedPath;
            needsUpdate = true;
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å: ${product.image} -> ${correctedPath}`);
          } else {
            console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            errorsCount++;
          }
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (product.images && Array.isArray(product.images)) {
          const correctedImages = product.images.map(img => {
            if (typeof img === 'string' && img.startsWith('/uploads/–§–û–¢–û/')) {
              const correctedPath = img.replace('/uploads/–§–û–¢–û/', '/–§–û–¢–û/');
              const filePath = path.join(process.cwd(), 'public', correctedPath);
              
              if (fs.existsSync(filePath)) {
                console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ: ${img} -> ${correctedPath}`);
                return correctedPath;
              } else {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
                errorsCount++;
                return img;
              }
            }
            return img;
          });
          
          if (JSON.stringify(correctedImages) !== JSON.stringify(product.images)) {
            newImages = correctedImages;
            needsUpdate = true;
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (needsUpdate) {
          await prisma.product.update({
            where: { id: product.id },
            data: {
              image: newImage,
              images: newImages
            }
          });
          fixedCount++;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
        errorsCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${fixedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorsCount}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –¢–∞–∫–∂–µ –∏—Å–ø—Ä–∞–≤–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
async function fixProductTitles() {
  console.log('\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...');
  
  try {
    const products = await prisma.product.findMany();
    let fixedCount = 0;
    
    for (const product of products) {
      let newTitle = product.title;
      let needsUpdate = false;
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
      const corrections = {
        '–∏–æ–Ω –≥–∏–±—Ä–∏–¥': '–ø–∏–æ–Ω –≥–∏–±—Ä–∏–¥',
        '–∏–æ–Ω –∂–µ–ª—Ç—ã–π': '–ø–∏–æ–Ω –∂–µ–ª—Ç—ã–π',
        '–∏–æ–Ω –±–µ–ª—ã–π': '–ø–∏–æ–Ω –±–µ–ª—ã–π',
        '–∏–æ–Ω —Å –±—É—Ç–æ–Ω–æ–º': '–ø–∏–æ–Ω —Å –±—É—Ç–æ–Ω–æ–º',
        '—É–≤—à–∏–Ω': '–∫—É–≤—à–∏–Ω',
        '–æ—Ç–æ—Ä–∞–º–∫–∞': '—Ñ–æ—Ç–æ—Ä–∞–º–∫–∞',
        '–∞—Ä—Ñ–æ—Ä–æ–≤–∞—è': '—Ñ–∞—Ä—Ñ–æ—Ä–æ–≤–∞—è'
      };
      
      for (const [wrong, correct] of Object.entries(corrections)) {
        if (product.title.toLowerCase().includes(wrong.toLowerCase())) {
          newTitle = newTitle.replace(new RegExp(wrong, 'gi'), correct);
          needsUpdate = true;
        }
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ: –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
      const words = newTitle.toLowerCase().split(' ');
      const formattedTitle = words.map(word => {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (['—Å–º', '–º–º', '–∫–≥', '–≥—Ä', '–º–ª', '–ª', '–∏', '—Å', '–Ω–∞', '–≤', '–ø–æ', '–æ—Ç', '–¥–æ'].includes(word)) {
          return word;
        }
        return word.charAt(0).toUpperCase() + word.slice(1);
      }).join(' ');
      
      if (formattedTitle !== product.title) {
        newTitle = formattedTitle;
        needsUpdate = true;
      }
      
      if (needsUpdate) {
        await prisma.product.update({
          where: { id: product.id },
          data: { title: newTitle }
        });
        
        console.log(`‚úÖ ${product.title} -> ${newTitle}`);
        fixedCount++;
      }
    }
    
    console.log(`\nüìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π: ${fixedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π:', error);
  }
}

async function main() {
  await fixImagePaths();
  await fixProductTitles();
}

main().catch(console.error);
