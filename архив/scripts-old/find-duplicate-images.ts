import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function findDuplicateImages() {
  try {
    console.log('üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...\n');
    
    const products = await prisma.product.findMany({
      select: { id: true, title: true, image: true },
      orderBy: { id: 'asc' }
    });
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    const imageGroups: Record<string, typeof products> = {};
    
    products.forEach(product => {
      const image = product.image || 'NO_IMAGE';
      if (!imageGroups[image]) {
        imageGroups[image] = [];
      }
      imageGroups[image].push(product);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–±–æ–ª—å—à–µ 1 —Ç–æ–≤–∞—Ä–∞)
    let foundDuplicates = false;
    
    Object.entries(imageGroups).forEach(([image, productList]) => {
      if (productList.length > 1) {
        foundDuplicates = true;
        console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image}`);
        productList.forEach((product, index) => {
          console.log(`  ${index + 1}. ID ${product.id}: "${product.title}"`);
        });
        console.log('');
      }
    });
    
    if (!foundDuplicates) {
      console.log('‚úÖ –¢–æ–≤–∞—Ä–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const noImageCount = imageGroups['NO_IMAGE']?.length || 0;
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`   –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${noImageCount}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${Object.keys(imageGroups).length - (noImageCount > 0 ? 1 : 0)}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findDuplicateImages();
