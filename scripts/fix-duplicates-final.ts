import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function fixDuplicateImagesComplete() {
  console.log('üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const duplicates = await prisma.$queryRaw<Array<{title: string, count: bigint}>>`
      SELECT title, COUNT(*) as count 
      FROM "Product" 
      WHERE title IS NOT NULL AND title != ''
      GROUP BY title 
      HAVING COUNT(*) > 1 
      ORDER BY count DESC, title
    `;
    
    console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏\n`);
    
    let totalFixed = 0;
    let totalErrors = 0;
    
    for (const dup of duplicates) {
      console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É: "${dup.title}" (${dup.count} —Ç–æ–≤–∞—Ä–æ–≤)`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const products = await prisma.product.findMany({
        where: { title: dup.title },
        select: { id: true, title: true, image: true, images: true },
        orderBy: { id: 'asc' }
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
      for (let i = 0; i < products.length; i++) {
        const product = products[i];
        console.log(`   ID ${product.id}: ${product.image || '–ù–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø'}`);
        
        if (i === 0) {
          // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (product.image) {
            const firstImagePath = path.join(process.cwd(), 'public', product.image);
            if (fs.existsSync(firstImagePath)) {
              console.log(`   ‚úÖ –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            } else {
              console.log(`   ‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...`);
              const found = await assignAlternativeImage(product, '');
              if (found) {
                totalFixed++;
                console.log(`   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${found}`);
              } else {
                totalErrors++;
              }
            }
          }
        } else {
          // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
          const found = await assignAlternativeImage(product, ` ${i + 1}`);
          if (found) {
            totalFixed++;
            console.log(`   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${found}`);
          } else {
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            const altFound = await assignAlternativeImage(product, `${i + 1}`);
            if (altFound) {
              totalFixed++;
              console.log(`   ‚úÖ –ù–∞–∑–Ω–∞—á–µ–Ω–æ (–∞–ª—å—Ç): ${altFound}`);
            } else {
              totalErrors++;
              console.log(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
            }
          }
        }
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalFixed}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
    console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä—É–ø–ø: ${duplicates.length}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

async function assignAlternativeImage(product: any, suffix: string): Promise<string | null> {
  if (!product.image) return null;
  
  const publicDir = path.join(process.cwd(), 'public');
  const originalPath = product.image;
  const dir = path.dirname(originalPath);
  const ext = path.extname(originalPath);
  const baseName = path.basename(originalPath, ext);
  
  // –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –±–∞–∑–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const cleanBaseName = baseName.replace(/\s*\d+\s*$/, '').trim();
  
  // –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  const candidates = [
    `${cleanBaseName}${suffix}${ext}`,
    `${cleanBaseName} ${suffix.trim()}${ext}`,
    `${baseName}${suffix}${ext}`,
  ].filter((name, index, arr) => arr.indexOf(name) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  
  for (const candidate of candidates) {
    const candidatePath = path.join(dir, candidate);
    const fullPath = path.join(publicDir, candidatePath);
    
    if (fs.existsSync(fullPath)) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ (–¥–æ–±–∞–≤–ª—è–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
        const normalizedPath = candidatePath.startsWith('/') ? candidatePath : `/${candidatePath}`;
        await prisma.product.update({
          where: { id: product.id },
          data: {
            image: normalizedPath,
            images: [normalizedPath]
          }
        });
        
        return normalizedPath;
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
      }
    }
  }
  
  return null;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
fixDuplicateImagesComplete();
