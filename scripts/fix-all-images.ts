import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function fixAllImageIssues() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...\n');
  
  try {
    let fixedCount = 0;
    let errorCount = 0;
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ —Å–ª–µ—à–∞
    console.log('1Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –±–µ–∑ –≤–µ–¥—É—â–µ–≥–æ —Å–ª–µ—à–∞...');
    
    const productsWithBadPaths = await prisma.product.findMany({
      where: {
        OR: [
          {
            AND: [
              { image: { not: null } },
              { image: { not: '' } },
              { image: { not: { startsWith: '/' } } },
              { image: { not: { startsWith: 'http' } } }
            ]
          }
        ]
      },
      select: { id: true, image: true, images: true }
    });
    
    for (const product of productsWithBadPaths) {
      try {
        const updates: any = {};
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (product.image && !product.image.startsWith('/') && !product.image.startsWith('http')) {
          updates.image = `/${product.image}`;
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (product.images && Array.isArray(product.images)) {
          const fixedImages = product.images.map((img: string) => {
            if (img && !img.startsWith('/') && !img.startsWith('http')) {
              return `/${img}`;
            }
            return img;
          }).filter(Boolean);
          
          if (JSON.stringify(fixedImages) !== JSON.stringify(product.images)) {
            updates.images = fixedImages;
          }
        }
        
        if (Object.keys(updates).length > 0) {
          await prisma.product.update({
            where: { id: product.id },
            data: updates
          });
          fixedCount++;
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.id}:`, error);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—É—Ç–µ–π: ${fixedCount}`);
    
    // 2. –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const productsWithoutImages = await prisma.product.count({
      where: {
        AND: [
          {
            OR: [
              { image: null },
              { image: '' }
            ]
          },
          {
            OR: [
              { images: { equals: null } },
              { images: { equals: [] } }
            ]
          }
        ]
      }
    });
    
    console.log(`üìä –¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${productsWithoutImages}`);
    
    // 3. –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π
    console.log('\n3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –ø—É—Ç—è–º–∏...');
    
    const cleanedUp = await prisma.product.updateMany({
      where: {
        image: {
          in: ['undefined', 'null', '', '–§–û–¢–û/', '/–§–û–¢–û/', 'uploads/', '/uploads/']
        }
      },
      data: {
        image: null
      }
    });
    
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${cleanedUp.count}`);
    
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ: ${cleanedUp.count}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixAllImageIssues();
